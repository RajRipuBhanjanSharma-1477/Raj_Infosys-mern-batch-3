                        React JS
===========================================================================
What is React JS?
------------------
React JS is a JavaScript library for building user interfaces. 
It allows developers to create reusable UI components and
It allows developers to create segmentised code.
It is used for building Single Page Applications (SPAs) and mobile applications.
It is used for building reusable UI components and it is used for building reusable UI components.
-------------------------------------------------------------------------
Setting up react application
--------------------------------
To set up a React application, you need to follow these steps:
1. Install Node.js and npm (the package manager for Node.js) on your computer.
2. create app using npm create vite@latest project_name
3. cd project_name
4. npm install
5. npm run dev

-------------------------------------------------------------------------
Components in React
-------------------
Components are the building blocks of React applications.
They are reusable pieces of code that represent a UI element.
They can contain other components.

Types of components:
1. Functional components
2. Class components

Functional Components:
-------------------
Functional components are the simplest type of component.
They are defined as functions that return JSX elements.
They do not have their own state and do not have lifecycle methods.
--------------------
Props in react:
-----------------
Props are short for properties.
They are immutable properties and are passed from a parent component to a child component.
They are used to pass data from a parent component to a child component.
===============================================
Class Component:
----------------
Class components are a type of component that has its own state and lifecycle methods.
They are defined as classes that extend the React.Component class.
They have their own state and lifecycle methods.

State in react
----------------
State is an object that stores the data and UI state of a component.
--------------------------------------------------------------------------------------------
Event Handling in React JS
--------------------------------------------------------
What is an event?
Event is the occurance of a user input
Eg: Mouse click, Keyboard key press

To handle events, we need event handlers.
Mouse click events:
1. onClick
To handle mouse click events we use the onClick event handler
2. onFocus
To make an element active to take user inputs
3. onBlur
To make an element inactive to stop user inputs

-------------------------------------------------------------
Event Binding in react:
--------------------------------
Event binding is the process of attaching an event handler to an element.
There are two ways to bind events in react:
1. Inline event binding
2. Arrow function event binding
--------------------------------
Data Binding in react:
--------------------------------
Data binding is the process of binding data to a component.
There are two ways to bind data in react:
1. Props
2. State
--------------------------------
Types of data binding:
1. One way data binding
2. Two way data binding

One way data binding:
-------------------
In one way data binding, the data flows from the parent component to the child component.
The child component cannot change the data of the parent component.
Data flows from componen(state) to view part (return statement/render function)
--------------------------------
Two way data binding:
--------------------------------
In two way data binding, the data flows from the parent component to the child component and from the
child component to the parent component.
The child component can change the data of the parent component.
Data flows from component to view and view to component
--------------------------------

Hooks:-
Hooks are a way to use state and other React features without writing a class.
They are functions that let you "hook into" React state and lifecycle methods from function components.
Meaning:-
We can use React class component features in a functional component
To use state in a functional component: useState()
To use lifecycle methods in a functional component: useEffect() and useLayoutEffect()
To populate a object to different component: useContext()
(Example: dark theme, light theme)